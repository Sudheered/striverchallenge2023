#include <bits/stdc++.h>

void setZeros(vector<vector<int>> &matrix)
{
	// Write your code here.
	vector<int> row(matrix.size(),1);
	vector<int> col(matrix[0].size(),1);
	for(int i=0;i<matrix.size();i++){
		for(int j=0;j<matrix[0].size();j++){
			if(matrix[i][j]==0){
				row[i]=0;
				col[j]=0;
			}
		}
	}
	for(int i=0;i<matrix.size();i++){
		for(int j=0;j<matrix[0].size();j++){
			if(row[i]==0||col[j]==0)matrix[i][j]=0;
		}
	}
}
#include <bits/stdc++.h> 
long long help(vector<vector<long long int>>& dp,int pre,int arr[],int i,int n){
    if(i==n)return 0;
    if(dp[i][pre]!=-1)return dp[i][pre];
    long long int ans=0;
    if(pre){
        ans=max(ans,arr[i]+help(dp,true,arr,i+1,n));
    }
    else{
        ans=max(ans,help(dp,false,arr,i+1,n));
        ans=max(ans,arr[i]+help(dp,true,arr,i+1,n));
    }
    return dp[i][pre]=ans;
}
long long maxSubarraySum(int arr[], int n)
{
    /*
        Don't write main().
        Don't read input, it is passed as function argument.    
        No need to print anything.
        Taking input and printing output is handled automatically.
    */
    vector<vector<long long int>> dp(n,vector<long long int>(2,-1));
    return help(dp,0,arr,0,n);
}
#include <bits/stdc++.h> 
void swap(int arr[],int i,int j){
   int temp=arr[i];
   arr[i]=arr[j];
   arr[j]=temp;
}
void sort012(int *arr, int n)
{
   //   Write your code here
   int s=0;
   int e=n-1;
   int m=0;
   while(m<=e){
      if(arr[m]==0){
         swap(arr,m,s);
         s++;
         m++;
      }
      else if(arr[m]==2){
         swap(arr,m,e);
         e--;
      }
      else{
         m++;
      }
   }
}
#include <bits/stdc++.h> 
int maximumProfit(vector<int> &prices){
    // Write your code here.
    if(prices.size()==0)return 0;
    int ans=0;
    int curr=prices[0];
    for (int i = 1; i < prices.size(); i++) {
      ans = max(prices[i] - curr, ans);
      curr = min(curr, prices[i]);
    }
    return ans;
}
#include <bits/stdc++.h> 
/*

    intervals[i][0] = start point of i'th interval
    intervals[i][1] = finish point of i'th interval

*/
vector<vector<int>> mergeIntervals(vector<vector<int>> &intervals)
{
    // Write your code here.
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>q;
    for(int i=0;i<intervals.size();i++){
        pair<int,int> temp={intervals[i][0],intervals[i][1]};
        q.push(temp);
    }
    vector<vector<int>>ans;
    int i=-1;
    int pre=-1;
    while(!q.empty()){
        if(q.top().first>pre){
            ans.push_back({q.top().first,q.top().second});
            pre=q.top().second;
            i++;
        }
        else if(ans[i][1]<q.top().second) {
            ans[i][1]=q.top().second;
            pre=ans[i][1];
        }
        q.pop();
    }
    return ans;
}
#include <bits/stdc++.h>

int findDuplicate(vector<int> &arr, int n){
	// Write your code here.
	int slow=arr[0];
	int fast=arr[0];
	do{
		slow=arr[slow];
		fast=arr[arr[fast]];
	}while(slow!=fast);
	slow=arr[0];
	while(fast!=slow){
		fast=arr[fast];
		slow=arr[slow];
	}
	return slow;
}
#include <bits/stdc++.h>

int findDuplicate(vector<int> &arr, int n){
	// Write your code here.
	int slow=arr[0];
	int fast=arr[0];
	do{
		slow=arr[slow];
		fast=arr[arr[fast]];
	}while(slow!=fast);
	slow=arr[0];
	while(fast!=slow){
		fast=arr[fast];
		slow=arr[slow];
	}
	return slow;
}

//{ Driver Code Starts
#include <bits/stdc++.h>

    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    vector<long long > pro;
    long long int merge(long long  arr[], long long int l, long long int m,long long int r)
    {
         // Your code here
         long long ans=0;
         long long i=l;
         long long j=m;
         long long k=l;
         while(i<=m-1&&j<=r){
             if(arr[i]<=arr[j]){
                 pro[k++]=arr[i++];
             }
             else {
                 ans+=m-i;
                 pro[k++]=arr[j++];
             }
         }
         while(i<=m-1)pro[k++]=arr[i++];
         while(j<=r)pro[k++]=arr[j++];
         for(i=l;i<=r;i++)arr[i]=pro[i];
         return ans;
    }
    long long int mergesort(long long arr[],long long l,long long r){
        long long int ans=0;
        long long mid;
        if(r>l){
            mid=(r+l)/2;
            ans+=mergesort(arr,l,mid);
            ans+=mergesort(arr,mid+1,r);
            ans+=merge(arr,l,mid+1,r);
        }
        return ans;
    }
    long long int getInversions(long long *arr, int n)
    {
        // Your Code Here
        long long int l=0; 
        long long int r=n-1;
        pro.resize(n,-1);
        return mergesort(arr,l,r);
    }




bool searchMatrix(vector<vector<int>>& mat, int target) {
    int s=0;
    int e=mat.size()*mat[0].size()-1;
    while(s<=e){
        int mid=(s+e)/2;
        int r=mid/mat[0].size();
        int c=mid%mat[0].size();
        if (mat[r][c] < target) {
          s=mid+1;
        } 
        else if (mat[r][c] > target){
            e=mid-1;
        }
        else return true;
    }
    return false;
}#include <bits/stdc++.h>

int findMajorityElement(int arr[], int n) {
	// Write your code here.
	int curr=arr[0];
	int fre=1;
	for(int i=1;i<n;i++){
		if(curr==arr[i])fre++;
		else {
			fre--;
		}
		if(!fre){
			curr=arr[i];
			fre=1;
		}
	}
	fre=0;
	for(int i=0;i<n;i++){
		if(arr[i]==curr)fre++;
	}
	if(fre<=n/2)return -1;
	return curr;
}#include <bits/stdc++.h> 
int help(vector<vector<int>>& dp,int i,int j,int m,int n){
	if(dp[i][j]!=-1)return dp[i][j];
	if(i==m-1&&j==n-1)return dp[i][j]=1;
	int ans=0;
	if(i+1<m)ans+=help(dp,i+1,j,m,n);
	if(j+1<n)ans+=help(dp,i,j+1,m,n);
	return dp[i][j]=ans;
}
int uniquePaths(int m, int n) {
	// Write your code here.
	vector<vector<int>> dp(m,vector<int>(n,-1));
	int ans=help(dp,0,0,m,n);
	return ans;
}#include <bits/stdc++.h>

vector<vector<int>> pairSum(vector<int> &arr, int s){
   // Write your code here.
   sort(arr.begin(),arr.end());
   vector<vector<int>> ans;
   for(int i=0;i<arr.size();i++){
      int tar=s-arr[i];
      int l=lower_bound(arr.begin()+i+1,arr.end(),tar)-arr.begin();
      int r=upper_bound(arr.begin()+i+1,arr.end(),tar)-arr.begin();
      for(int j=l;j<r;j++){
         ans.push_back({arr[i],arr[j]});
      }
   }
   return ans;
}#include <bits/stdc++.h>

string fourSum(vector<int> arr, int target, int n) {
    // Write your code here.
    sort(arr.begin(),arr.end());
    for(int i=0;i<n-3;i++){
        int t1=target-arr[i];
        for(int j=i+1;j<n-2;j++){
            int t2=t1-arr[j];
            int s=j+1;
            int e=n-1;
            while(s<e){
                int curr=t2-(arr[s]+arr[e]);
                if(curr<0)e--;
                else if(curr>0)s++;
                else return "Yes";
            }
        }
    }
    return "No";
}
#include <bits/stdc++.h>

int lengthOfLongestConsecutiveSequence(vector<int> &arr, int n) {
    // Write your code here.
    sort(arr.begin(),arr.end());
    int ans=1;
    int curr=1;
    for(int i=1;i<n;i++){
        if(arr[i]==arr[i-1]+1){
            curr++;
        }
        else if(arr[i]>arr[i-1]){
            curr=1;
        }
        ans=max(ans,curr);
    }
    return ans;
}#include <bits/stdc++.h> 
int uniqueSubstrings(string input)
{
    map<char,int> m;
    int ans=1;
    m[input[0]]=1;
    int s=0;
    for(int e=1;e<input.size();e++){
        while(m.find(input[e])!=m.end()){
            m.erase(input[s++]);
        }
        ans=max(ans,e-s+1);
        m[input[e]]++;
    }
    return ans;
}/*
Following is the class structure of the Node class:

class Node
{
public:
    int data;
    Node *next;
    Node()
    {
        this->data = 0;
        next = NULL;
    }
    Node(int data)
    {
        this->data = data; 
        this->next = NULL;
    }
    Node(int data, Node* next)
    {
        this->data = data;
        this->next = next;
    }
};
*/

Node *findMiddle(Node *head) {
    // Write your code here
    Node* fast=head;
    Node* slow=head;
    while(fast!=NULL&&fast->next!=NULL){
        fast=fast->next->next;
        slow=slow->next;
    }
    return slow;
}

#include <bits/stdc++.h>

/************************************************************

    Following is the linked list node structure.
    
    template <typename T>
    class Node {
        public:
        T data;
        Node* next;

        Node(T data) {
            next = NULL;
            this->data = data;
        }

        ~Node() {
            if (next != NULL) {
                delete next;
            }
        }
    };

************************************************************/

Node<int>* sortTwoLists(Node<int>* first, Node<int>* second)
{
    // Write your code here.
    Node<int>* ans=new Node<int>(-1);
    Node<int>* temp=ans;
    Node<int>* t1=first;
    Node<int>* t2=second;
    while(t1&&t2){
        if(t1->data<t2->data){
            temp->next=t1;
            t1=t1->next;
            temp=temp->next;
            temp->next=NULL;
        }
        else{
            temp->next=t2;
            t2=t2->next;
            temp=temp->next;
            temp->next=NULL;
        }
    }
    while(t1){
        temp->next=t1;
            t1=t1->next;
            temp=temp->next;
            temp->next=NULL;
    }
    while(t2){
         temp->next=t2;
            t2=t2->next;
            temp=temp->next;
            temp->next=NULL;
    }
    return ans->next;
}
/*
Following is the class structure of the Node class:

class Node
{
public:
    int data;
    Node *next;
    Node()
    {
        this->data = 0;
        next = NULL;
    }
    Node(int data)
    {
        this->data = data; 
        this->next = NULL;
    }
    Node(int data, Node* next)
    {
        this->data = data;
        this->next = next;
    }
};
*/

int siz(Node* head){
    Node* temp=head;
    int size=0;
    while(temp){
        size++;
        temp=temp->next;
    }
    return size;
}
Node* removeKthNode(Node* head, int K)
{
    // Write your code here.
    int size=siz(head);
    int curr=size-K;
    Node* temp=new Node(-1);
    temp->next=head;
    Node*ans=temp;
    while(curr--){
        temp=temp->next;
    }
    Node* del=temp->next;
    temp->next=temp->next->next;
    delete(del);
    return ans->next;
}
/****************************************************************

    Following is the class structure of the Node class:

        class Node
        {
        public:
            int data;
            Node *next;
            Node()
            {
                this->data = 0;
                next = NULL;
            }
            Node(int data)
            {
                this->data = data;
                this->next = NULL;
            }
            Node(int data, Node* next)
            {
                this->data = data;
                this->next = next;
            }
        };


*****************************************************************/

bool detectCycle(Node *head)
{
	//	Write your code here
    if(head==NULL||head->next==NULL)return false;
    Node* fast=head;
    Node* slow=head;
    do{
        fast=fast->next->next;
        slow=slow->next;
    }while(fast&&fast->next&&fast!=slow);
    if(fast==slow)return true;
    return false;
}#include <bits/stdc++.h>

/****************************************************************

    Following is the class structure of the Node class:

        class Node
        {
        public:
	        int data;
	        Node *next;
	        Node(int data)
	        {
		        this->data = data;
		        this->next = NULL;
	        }
        };

*****************************************************************/

    void reverse(Node * head){
        Node * pre=NULL;
        Node * curr=head;
        Node * nxt=head->next;
        while(curr){
            nxt=curr->next;
            curr->next=pre;
            pre=curr;
            curr=nxt;
        }
    }
    Node * getListAfterReverseOperation(Node *head, int n, int b[]) {
        Node * ans=new Node(-1);
        Node * it=ans;
        it->next=head;
		int iterator=0;
        while(it->next&&iterator<n){
			if(!b[iterator]){iterator++;
			continue;}
            Node * nextk=it;
            int temp=b[iterator];
            while(nextk->next&&temp--){
                nextk=nextk->next;
            }
            Node *rs=nextk;
            nextk=nextk->next;
            rs->next=NULL;
            Node * re=it->next;
            it->next=NULL;
            reverse(re);
            it->next=rs;
            re->next=nextk;
            it=re;
			iterator++;
        }
        return ans->next;
    }#include <bits/stdc++.h> 
/****************************************************************

    Following is the class structure of the LinkedListNode class:

    template <typename T>
    class LinkedListNode
    {
    public:
        T data;
        LinkedListNode<T> *next;
        LinkedListNode(T data)
        {
            this->data = data;
            this->next = NULL;
        }
    };

*****************************************************************/
LinkedListNode<int> *reverseLinkedList(LinkedListNode<int> *head) 
{
    // Write your code here
    if(head==NULL||head->next==NULL)return head;
    LinkedListNode<int>* pre=NULL;
    LinkedListNode<int>* curr=head;
    LinkedListNode<int>* nxt;
    while(curr!=NULL){
        nxt=curr->next;
        curr->next=pre;
        pre=curr;
        curr=nxt;
    }
    return pre;
}
bool isPalindrome(LinkedListNode<int> *head) {
    // Write your code here.
    if(head==NULL||head->next==NULL)return true;
    LinkedListNode<int>* slow=new LinkedListNode<int>(-1);
    LinkedListNode<int>* fast=head;
    slow->next=head;
    while(fast&&fast->next){
        fast=fast->next->next;
        slow=slow->next;
    }
    LinkedListNode<int>* head2;
    if(fast){
        head2=slow->next->next;
    }
    else{
        head2=slow->next;
    }
    slow->next=NULL;
    LinkedListNode<int> * t1=head;
    LinkedListNode<int> * t2=reverseLinkedList(head2);
    while(t1){
        if(t1->data!=t2->data)return false;
        t1=t1->next;
        t2=t2->next;
    }
    return true;
}/****************************************************************

    Following is the class structure of the Node class:

        class Node
        {
        public:
            int data;
            Node *next;
            Node()
            {
                this->data = 0;
                next = NULL;
            }
            Node(int data)
            {
                this->data = data;
                this->next = NULL;
            }
            Node(int data, Node* next)
            {
                this->data = data;
                this->next = next;
            }
        };


*****************************************************************/

Node *firstNode(Node *head)
{
    //    Write your code here.
    if(head==NULL||head->next==NULL)return NULL;
    Node* fast=head;
    Node* slow=head;
    do{
        fast=fast->next->next;
        slow=slow->next;
    }while(fast&&fast->next&&fast!=slow);
    if(fast==NULL||fast->next==NULL)return NULL;
    fast=head;
    while(fast!=slow){
        fast=fast->next;
        slow=slow->next;
    }
    return fast;
}/**
 * Definition for singly-linked list.
 * class Node {
 * public:
 *     int data;
 *     Node *next;
 *     Node() : data(0), next(nullptr) {}
 *     Node(int x) : data(x), next(nullptr) {}
 *     Node(int x, Node *next) : data(x), next(next) {}
 * };
 */
int siz(Node* head){
     Node* temp=head;
     int ans=0;
     while(temp){
          ans++;
          temp=temp->next;
     }
     return ans;
}
Node* rotate(Node* head, int k)
    {
        // Your code here
        if(k==0)return head;
        int size=siz(head);
        k%=size;
        k=size-k;
        Node* temp=head;
        Node* temp2=head;
        Node* temp3=head;
        while(k>1){
            temp=temp->next;
            k--;
        }
        if(!temp->next)return head;
        temp2=temp->next;
        temp3=temp->next;
        temp->next=NULL;
        while(temp2->next)temp2=temp2->next;
        temp2->next=head;
        return temp3;
    }
    
    
    
    
